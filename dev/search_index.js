var documenterSearchIndex = {"docs":
[{"location":"#UnionArrays.jl","page":"Home","title":"UnionArrays.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [UnionArrays, UnionArrays.Abstract]","category":"page"},{"location":"#UnionArrays.UnionArrays","page":"Home","title":"UnionArrays.UnionArrays","text":"UnionArrays: storage-agnostic array type with Union elements\n\n(Image: Stable) (Image: Dev) (Image: GitHub Actions) (Image: Codecov) (Image: GitHub last commit)\n\nUnionArrays.jl provides an array type with Union element types that is generic over the data storage type.\n\njulia> using UnionArrays\n\njulia> xs = UnionVector(undef, Vector, Union{Float32,Tuple{},UInt8}, 3);\n\njulia> fill!(xs, ());\n\njulia> xs[1]\n()\n\njulia> xs[2] = 1.0f0;\n\njulia> xs[3] = UInt8(2);\n\njulia> collect(xs)\n3-element Vector{Union{Tuple{}, Float32, UInt8}}:\n     ()\n    1.0f0\n 0x02\n\nFor example, it can be used for bringing Union element types to GPU:\n\njulia> using CUDA\n\njulia> xs = UnionVector(undef, CuVector, Union{Float32,Nothing}, 3);\n\njulia> fill!(xs, nothing);\n\nPackages like Transducers.jl and Folds.jl support computations with UnionArrays on GPU:\n\njulia> using Folds, FoldsCUDA\n\njulia> Folds.all(==(nothing), xs)\ntrue\n\njulia> CUDA.@allowscalar begin\n           xs[2] = 1.0f0\n           xs[3] = 2.0f0\n       end;\n\njulia> Folds.sum(x -> x === nothing ? 0.0f0 : x, xs; init = 0.0f0)\n3.0f0\n\n\n\n\n\n","category":"module"},{"location":"#UnionArrays.Abstract.UnionArray","page":"Home","title":"UnionArrays.Abstract.UnionArray","text":"UnionArray{T, N}\nUnionVector{T}\nUnionMatrix{T}\n\nUnionArray stores heterogeneous elements without indirections (which would happen in Array{Any}).\n\nExamples\n\njulia> using UnionArrays\n\njulia> xs = UnionVector(Any[UInt8(1), 2.0, (a=1, b=2)]);\n\njulia> xs[1]\n0x01\n\njulia> xs[2]\n2.0\n\njulia> xs[3]\n(a = 1, b = 2)\n\njulia> xs[1] = (a=3, b=4);\n\njulia> xs[1]\n(a = 3, b = 4)\n\njulia> M = reshape(xs, (1, :)) :: UnionMatrix;\n\njulia> M[1, 1]\n(a = 3, b = 4)\n\n\n\n\n\n","category":"type"}]
}
